grafana:
  admin:
    existingSecret: grafana-auth
    userKey: admin-user
    passwordKey: admin-password
  defaultDashboardsTimezone: browser # TimeZone 설정 (default: UTC)
  sidecar:
    datasources:
      url: http://thanos-query-frontend.monitoring.svc.cluster.local:9090/
  ingress:
    ingressClassName: nginx
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      external-dns.alpha.kubernetes.io/target: 121.130.214.237
    hosts:
    - grafana.kkamji.net
    paths:
    - /
    tls:
    - secretName: grafana-tls
      hosts:
      - grafana.kkamji.net
  additionalDataSources:
  - name: Loki
    type: loki
    access: proxy
    url: http://loki-gateway:80
    jsonData:
      timeout: 60
      maxLines: 1000
      httpHeaderName1: "X-Scope-OrgID"
    secureJsonData:
      httpHeaderValue1: "kkamji"
prometheus:
  thanosService:
    # Thanos Sidecar용 Service 생성
    enabled: true
  prometheusSpec:
    additionalScrapeConfigs:
    # Hubble & Cilium Metric 수집을 위한 설정
    - job_name: 'kubernetes-pods' ## Cilium
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
        action: keep
        regex: true
      - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: ${1}:${2}
        target_label: __address__

    - job_name: 'kubernetes-endpoints' ## Hubble
      scrape_interval: 30s
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
        action: keep
        regex: true
      - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+);(\d+)
        replacement: $1:$2

    retention: 2d
    thanos:
      objectStorageConfig:
        existingSecret:
          name: "thanos-objstore"
          key: "objstore.yml"
  ingress:
    ingressClassName: nginx
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: letsencrypt-prod
      nginx.ingress.kubernetes.io/auth-type: "basic" # 인증 타입
      nginx.ingress.kubernetes.io/auth-secret: "prometheus-basic-auth" # 인증에 사용할 secret
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required" # 인증 프롬프트에 보내는 메시지
      external-dns.alpha.kubernetes.io/target: 121.130.214.237
    hosts:
    - prometheus.kkamji.net
    paths:
    - /
    tls:
    - secretName: prometheus-tls
      hosts:
      - prometheus.kkamji.net

# prometheusOperator:
#   admissionWebhooks:
#     patch:
#       enabled: false
